너는 최고의 시스템 설계와 개발이 가능한 개발자야

이 프롬프트는 태국 람차방 항구 공유 물류 시스템을 개발하기 위한 상세하고 포괄적인 지침입니다. 제공된 모든 문서(CRD, Task Flow, 상세 기능표, UI/UX 태스크 플로우, ERD, TDD 개발 순서)를 철저히 분석하고, TDD(Test-Driven Development) 방법론에 따라 백엔드, 웹 프론트엔드, 모바일 앱을 구현해야 합니다.
1. 프로젝트 개요 및 목표
시스템 목적: 태국 방콕 람차방 항구 주변 운송사 간의 컨테이너 운송 여유(tolerance) 및 요청을 공유하여 운송 비효율을 줄이고 운송 효율을 극대화하는 시스템 개발.
주요 사용자 역할:
관리자 (Administrator): 시스템 전반 관리, 모니터링, 사용자/운송사/기사 계정 및 권한 제어, 통계/보고서 생성.
운송사 (Carrier): 여유 운송/운송 요청 등록 및 관리, 매칭 확인, 운송 진행 모니터링, 소속 기사 관리, 평가/리뷰 작성.
기사 (Driver): 할당된 운송 건 확인, 실시간 위치 공유, 특이사항 보고, 운송 완료 처리 및 증빙 업로드 (모바일 앱 사용).
핵심 기능: 운송 정보 등록/조회, 자동 매칭, 실시간 운송 모니터링, 알림, 통계/보고서, 사용자/권한 관리, 화물 정보 관리, 분쟁 해결.
2. 개발 방법론: TDD (Test-Driven Development)
모든 기능 개발은 다음 TDD 사이클을 엄격히 준수해야 합니다.
Red (실패하는 테스트 작성): 구현할 기능에 대한 실패하는 테스트 코드를 먼저 작성합니다. 이 테스트는 기능의 요구사항을 명확히 정의해야 합니다.
Green (테스트 통과를 위한 최소한의 코드 작성): 작성된 테스트를 통과하기 위한 최소한의 기능 코드를 작성합니다. 이때는 코드 품질보다 테스트 통과에 집중합니다.
Refactor (코드 리팩토링): 테스트를 통과한 후, 코드의 가독성, 유지보수성, 성능, 구조 등을 개선합니다. 리팩토링 중에도 모든 테스트가 통과하는지 지속적으로 확인합니다.
3. 시스템 아키텍처 및 기술 스택
백엔드:
역할: RESTful API 제공, 비즈니스 로직 처리, 데이터베이스 연동.
선호 언어/프레임워크: Java (Spring Boot), Node.js (Express), Python (Django/Flask) 중 선택하여 구현.
프론트엔드 (웹):
역할: 관리자 및 운송사용 웹 애플리케이션 UI/UX 구현.
선호 프레임워크: React, Vue.js 중 선택하여 구현.
모바일 앱 (기사용):
역할: 기사용 실시간 위치 공유 및 운송 관리 앱 UI/UX 구현.
선호 프레임워크: React Native, Flutter 중 선택하여 구현.
데이터베이스:
종류: MySQL.
스키마: 제공된 ERD 문서(shared-logistics-erd)에 정의된 모든 테이블과 속성(컬럼명, 데이터 타입, 제약 조건: PK, FK, NOT NULL, DEFAULT, ENUM, JSON 등)을 정확히 준수하여 생성 및 연동해야 합니다.
주요 테이블: users, carriers, drivers, tolerances, delivery_requests, matches, location_paths, reviews, proof_of_delivery, disputes, activity_logs, system_settings, master_data, inquiries, user_settings, announcements, messages, user_notification_settings, localization_data, audit_logs, permissions.
ERD에 명시된 추가 필드: tolerances.is_empty_run, delivery_requests.cargo_details_json, matches.rejection_reason 등 상세 기능표와 ERD에 추가된 필드들을 반드시 포함합니다.
API 설계 원칙:
RESTful: 자원 기반의 명확한 URI 설계, 적절한 HTTP 메서드(GET, POST, PUT, DELETE) 사용.
인증/인가: JWT 또는 세션 기반 인증 구현. 역할 기반 접근 제어(RBAC)를 위해 permissions 테이블을 활용하여 모든 API 요청에 대한 권한 검증을 철저히 수행합니다.
오류 처리: 표준 HTTP 상태 코드(예: 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Internal Server Error) 사용. 상세하고 명확한 오류 메시지를 JSON 형식으로 제공합니다.
입출력 형식: 모든 API 요청 및 응답은 JSON 형식을 따릅니다.
4. 상세 기능별 구현 지침 (핵심)
각 기능 ID별로 백엔드 API, 프론트엔드 UI/UX, 모바일 앱 UI/UX, DB 연동, TDD 개발 순서를 구현해야 합니다. 아래 지침은 각 기능 그룹의 핵심 요구사항을 요약하며, 자세한 API 명세, UI/UX 상호작용, DB 연동 세부 사항 및 TDD 개발 순서는 다음 문서들을 철저히 참조하십시오.
CRD 문서: shared-logistics-crd
상세 기능표: shared-logistics-detailed-features-reformatted
기능 ID별 상세 기능표: shared-logistics-detailed-sub-features
최종 태스크 플로우: shared-logistics-final-task-flow
ERD: shared-logistics-erd
4.1. 사용자 및 권한 관리 (UAM)
목표: 시스템 사용자(관리자, 운송사, 기사)의 계정 생성, 로그인, 정보 조회/수정/삭제, 비밀번호 재설정, 그리고 관리자에 의한 역할/권한 관리를 구현합니다.
핵심 지침:
users, carriers, drivers, permissions 테이블을 활용한 CRUD 및 관계 관리.
비밀번호는 반드시 해싱하여 저장하고, 로그인 시 안전하게 검증합니다.
역할 기반 접근 제어(RBAC)를 모든 API 및 UI 요소에 적용하여, 사용자 역할에 따라 접근 가능한 기능과 데이터가 달라지도록 합니다.
참조 문서: UAM-01 ~ UAM-09 기능 ID에 대한 shared-logistics-detailed-sub-features의 모든 세부 지침.
4.2. 운송 정보 등록 및 관리 (TRM, DRM, CIM)
목표: 운송사들이 여유 운송 정보(공차 포함)와 운송 요청 정보를 등록, 조회, 수정, 삭제할 수 있도록 합니다. 운송 요청 시 화물 상세 정보를 포함합니다.
핵심 지침:
tolerances 및 delivery_requests 테이블을 활용한 CRUD.
delivery_requests.cargo_details_json 필드를 사용하여 화물 상세 정보(종류, 중량, 부피, 특수 취급 필요 여부)를 JSON 형태로 저장 및 관리합니다.
'available' 또는 'pending' 상태일 때만 수정/삭제가 가능하도록 비즈니스 로직을 구현합니다.
참조 문서: TRM-01 ~ TRM-04, DRM-01 ~ DRM-04, CIM-01 ~ CIM-03 기능 ID에 대한 shared-logistics-detailed-sub-features의 모든 세부 지침.
4.3. 매칭 및 운송 관리 (MCM)
목표: 여유 운송과 운송 요청 간의 자동 매칭을 제안하고, 운송사들이 이를 확인/거절하며, 운송 진행 상황을 모니터링하고 완료 처리하는 기능을 구현합니다. 기사는 실시간 위치를 공유하고, 운송 완료 증빙 자료를 업로드합니다. 운송사 간 평가/리뷰 및 분쟁 해결 기능도 포함합니다.
핵심 지침:
matches 테이블을 중심으로 tolerances, delivery_requests, location_paths, reviews, proof_of_delivery, disputes 테이블 간의 복잡한 관계 및 상태 변화 로직 구현.
자동 매칭 알고리즘은 system_settings의 규칙을 따르도록 구현.
실시간 위치 공유 및 모니터링을 위해 효율적인 데이터 전송 및 지도 API 연동 (Google Maps API 등) 고려.
참조 문서: MCM-01 ~ MCM-12 기능 ID에 대한 shared-logistics-detailed-sub-features의 모든 세부 지침.
4.4. 알림 및 커뮤니케이션 (NCM)
목표: 시스템 내 주요 이벤트 발생 시 사용자에게 적절한 알림을 제공하고, 운송사 및 기사 간 1:1 인앱 메시징 기능을 구현합니다.
핵심 지침:
매칭 제안, 상태 변경, 특이사항 보고 등 다양한 이벤트에 대한 알림 발송 로직 구현 (인앱, 이메일, SMS).
announcements 테이블을 활용한 시스템 공지 관리.
messages 테이블을 활용한 1:1 인앱 채팅 기능 구현 (실시간 통신을 위해 WebSocket 고려).
사용자별 알림 설정(user_notification_settings)을 통해 알림 수신 여부 및 방식을 제어할 수 있도록 합니다.
참조 문서: NCM-01 ~ NCM-07 기능 ID에 대한 shared-logistics-detailed-sub-features의 모든 세부 지침.
4.5. 통계 및 보고서 기능 (SRM)
목표: 시스템의 운영 현황을 파악하고 비효율을 개선하기 위한 다양한 통계 및 보고서 기능을 제공합니다.
핵심 지침:
전체 매칭률, 운송사별 실적, 컨테이너 타입별 통계, 경로 분석 통계 등 다양한 지표를 집계하고 시각화(그래프)하여 대시보드에 표시.
activity_logs 및 audit_logs 테이블을 활용하여 사용자 활동 및 감사 로그를 기록하고 조회.
통계 데이터를 기반으로 PDF/Excel 보고서 생성 및 다운로드 기능 구현.
참조 문서: SRM-01 ~ SRM-06 기능 ID에 대한 shared-logistics-detailed-sub-features의 모든 세부 지침.
4.6. 시스템 관리 및 기타 기능 (SSM)
목표: 시스템의 안정적인 운영을 위한 관리 기능과 사용자 편의를 위한 기타 기능을 제공합니다.
핵심 지침:
system_settings 테이블을 활용한 매칭 규칙 등 시스템 전반 설정 관리.
master_data 테이블을 활용한 컨테이너 타입, 지역 등 기준 정보 관리.
데이터 백업/복구, 시스템 성능 모니터링 기능 구현.
사용자 문의(inquiries) 및 지원 관리.
user_settings 테이블을 활용한 사용자 대시보드 커스터마이징.
localization_data 테이블을 활용한 다국어 지원.
audit_logs 테이블을 활용한 감사 추적.
향후 외부 시스템 연동을 위한 API 설계.
참조 문서: SSM-01 ~ SSM-09 기능 ID에 대한 shared-logistics-detailed-sub-features의 모든 세부 지침.
5. 비기능 요구사항 (Non-Functional Requirements)
다음 비기능 요구사항을 모든 개발 단계에서 최우선으로 고려해야 합니다.
보안:
모든 사용자 인증 및 인가 로직을 철저히 구현하고 테스트합니다.
비밀번호는 반드시 강력한 해싱 알고리즘을 사용하여 저장하고, 평문 저장은 절대 금지합니다.
모든 API 요청에 대해 SSL/TLS(HTTPS)를 적용하여 통신 보안을 확보합니다.
SQL 인젝션, XSS(Cross-Site Scripting), CSRF(Cross-Site Request Forgery) 등 일반적인 웹 취약점 방어 기법을 적용합니다.
민감 데이터(예: 개인 식별 정보)는 암호화하여 저장하거나 전송합니다.
성능:
데이터베이스 쿼리 최적화(적절한 인덱스 생성 및 활용)를 통해 응답 시간을 최소화합니다.
대량 데이터 조회 시 페이징(Pagination) 및 캐싱(Caching) 전략을 적극적으로 고려하고 적용합니다.
실시간 기능(위치 공유, 메시징)은 WebSocket과 같은 효율적인 통신 방식을 사용하여 지연을 최소화합니다.
확장성:
각 기능은 독립적인 모듈 또는 서비스로 분리하여 설계하고 구현하여, 향후 기능 추가 및 변경이 용이하도록 합니다.
수평적 확장을 고려하여 서버에 상태를 저장하지 않는(stateless) API를 설계합니다.
모니터링 및 로깅:
시스템의 CPU 사용량, 메모리 사용량, 디스크 I/O, 네트워크 트래픽, 데이터베이스 쿼리 응답 시간, API 응답 시간 등 주요 성능 지표를 모니터링할 수 있는 시스템(예: Prometheus, Grafana)과 연동합니다.
에러 로그, 활동 로그(activity_logs), 감사 로그(audit_logs)를 체계적으로 기록하고 관리할 수 있는 로깅 시스템(예: ELK Stack)을 구축합니다.
오류 처리:
모든 API 호출 및 비즈니스 로직에 대해 견고한 오류 처리 메커니즘(예: try-catch 블록, 전역 예외 처리기)을 구현합니다.
사용자에게는 명확하고 이해하기 쉬운 오류 메시지를 제공하여 문제 해결에 도움을 줍니다.
국제화 (i18n):
모든 UI 텍스트 및 메시지는 다국어 리소스 파일(localization_data 테이블 또는 별도 파일 시스템)에서 로드되도록 구현하여, 사용자가 언어를 선택할 수 있도록 합니다. (한국어, 태국어, 영어 지원)
6. 배포 및 운영 고려사항
CI/CD 파이프라인: Git 기반의 자동화된 테스트, 빌드, 배포(CI/CD) 파이프라인을 구축하여 개발 효율성을 높이고 배포 오류를 줄입니다.
서버 환경: 클라우드 환경(예: AWS EC2, GCP Compute Engine, Azure Virtual Machines) 또는 Docker/Kubernetes 기반의 컨테이너 환경에 애플리케이션을 배포하는 것을 고려합니다.
정기 백업: 데이터베이스의 정기적인 백업 스케줄링 및 재해 발생 시 신속한 복구를 위한 절차를 확립합니다.
운영 및 유지보수: 시스템 배포 후에도 정기적인 업데이트, 버그 수정, 성능 튜닝, 보안 패치 등을 통해 시스템을 안정적으로 유지보수합니다.
7. 개발 지침 및 코드 품질
코드 품질: 클린 코드(Clean Code) 원칙을 준수하고, 명확하고 일관된 코딩 컨벤션을 사용하여 코드의 가독성과 유지보수성을 높입니다.
모듈화: 각 기능은 독립적인 모듈 또는 서비스로 분리하여 개발하고, 명확한 인터페이스를 통해 상호작용하도록 합니다.
문서화: API 문서(Swagger/OpenAPI), 코드 주석, 시스템 설계 문서 등을 충실히 작성하여 개발 및 유지보수를 용이하게 합니다.
커밋 메시지: 의미 있고 명확한 커밋 메시지(예: Conventional Commits)를 작성하여 변경 이력을 효과적으로 관리합니다.
협업: Git 브랜치 전략(Git Flow 또는 GitHub Flow)을 준수하여 여러 개발자 간의 효율적인 협업을 지원합니다.
위에 제시된 모든 문서의 내용을 완전히 이해하고, 각 기능별 상세 요구사항과 TDD 개발 순서를 철저히 따르십시오. 질문이 있거나 추가적인 명확화가 필요한 경우 언제든지 요청하십시오.
